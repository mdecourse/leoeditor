<h1>About</h1>
<p>Leo Editor 導引網站的目的在試圖了解並運用其中獨特且實用的功能.</p>
<p>當然, 本網站的最大期望是能夠吸引更多年輕人進入 Leo Editor 的編程世界, 有機會參與協同程式開發, 進而改進現存的各種問題.</p>
<h4>Leo Editor 的挑戰:</h4>
<p style="padding-left: 30px;">開發時間已超過二十年, 許多新舊功能混雜在一起, 導致架構複雜, 新手難以入門.</p>
<p style="padding-left: 30px;">由<a href="https://github.com/leo-editor/leo-editor/graphs/contributors">少數</a>資深程式師負責開發, 不斷導入許多創新功能, 套件開發思考層面距離初學用戶太遠.</p>
<p style="padding-left: 30px;">圖形界面設定極度不靈活, 導致初學用戶卻步.</p>
<h4>Leo Editor 簡介:</h4>
<p style="padding-left: 30px;"><a href="https://www.leoeditor.com/preface.html">https://www.leoeditor.com/preface.html</a></p>
<p style="padding-left: 30px;">是一套全功能 IDE 與大綱管理套件</p>
<p style="padding-left: 30px;">使用 Python 編寫, 適合用來研究電腦程式碼</p>
<p style="padding-left: 30px;">p.b 就是所選節點的 body text, Scripts have full access to all of Leo’s sources.</p>
<p style="padding-left: 30px;">Clones create multiple views of an outline.<br/>Leo’s underlying data is a <a href="https://en.wikipedia.org/wiki/Directed_acyclic_graph">Directed Acyclic Graphs</a>.<br/>@test and @suite scripts create unit tests automatically.</p>
<p style="padding-left: 30px;"><a href="https://www.leoeditor.com/appendices.html#the-leonine-way-to-refactor-code">https://www.leoeditor.com/appendices.html#the-leonine-way-to-refactor-code</a></p>
<p style="padding-left: 30px;">@button scripts apply scripts to outline data.</p>
<p style="padding-left: 30px;">The execute-script command pre-defines three names: c, g, and p. c is the commander of the outline in which the script executes. g is the leo.core.leoGlobals module, containing dozens of useful functions and classes. p is the position of the presently selected node.</p>
<p style="padding-left: 30px;">c - commander of the outline</p>
<p style="padding-left: 30px;">g - leo.core.leoGlobals</p>
<p style="padding-left: 30px;">p - position of the presently selected node</p>
<p style="padding-left: 30px;"><a href="https://www.leoeditor.com/scripting-miscellany.html#id30">https://www.leoeditor.com/scripting-miscellany.html#id30</a></p>
<p style="padding-left: 30px;"><a href="https://www.leoeditor.com/scripting-miscellany.html#id33">https://www.leoeditor.com/scripting-miscellany.html#id33</a></p>
<h4>官方網站:</h4>
<p style="padding-left: 30px;"><a href="https://www.leoeditor.com/">https://www.leoeditor.com/</a></p>
<h4>Google Group:</h4>
<p style="padding-left: 30px;"><a href="https://groups.google.com/g/leo-editor?pli=1">https://groups.google.com/g/leo-editor?pli=1</a></p>
<h4>功能蒐羅:</h4>
<p style="padding-left: 30px;"><a href="https://github.com/mdecourse/leoeditor/discussions/1">https://github.com/mdecourse/leoeditor/discussions/1</a></p><h2>Reference</h2>
<p><a href="https://mde.tw/lab/blog/how-to-use-leo-editor.html">https://mde.tw/lab/blog/how-to-use-leo-editor.html</a></p>
<p><a href="http://project.mde.tw/blog/tag/leo-editor.html">http://project.mde.tw/blog/tag/leo-editor.html</a></p>
<p><a href="http://chiamingyen.github.io/kmolsite/blog/leo-editor-jiao-xue-yi.html">Leo Editor 教學 (一)</a> - 在 <a href="https://www.google.com/search?q=%22leo+editor%22">Google 搜尋 "Leo Editor"</a> 只傳回不到三萬筆的相關資料, 這對於已經開發超過 20 年的軟體套件來說, 可能是一項警訊, 因為沒有年輕人接手使用, 再好的數位工具, 最終仍難逃被時間淘汰的命運.</p>
<p><a href="https://news.ycombinator.com/item?id=17769892">https://news.ycombinator.com/item?id=17769892</a></p>
<p><a href="https://www.zhihu.com/question/22323482">https://www.zhihu.com/question/22323482</a></p>
<p></p><h1>Application</h1>
<h4>如何使用 Leo Editor</h4>
<p>理論上透過 pip install leo 就可以安裝 Leo Editor, 但是在 Windows, Mac 與 Ubuntu 安裝後的版本經常不一致, 導致許多用法上莫衷一是, 這裡將要針對這三套操作系統的 Leo Editor 應用加以介紹.</p>
<p>首先是在 Windows 10 操作系統中安裝 Leo Editor:</p>
<h4>系統安裝版</h4>
<p>當使用者從 <a href="https://www.python.org/downloads/windows/">https://www.python.org/downloads/windows/</a> 下載安裝 Python 3.9.5 時, Windows 10 會出現下列畫面, 表示 Windows 10 其實是希望使用者透過操作系統的 APP 模式安裝 Python. 因此以下自行安裝的 Python 3.9.5 後, 操作系統並不會將必要的 Python 執行路徑納入環境變數, 使用者必須自行設定.</p>
<p><img alt="" height="468" src="/images/win_dont_allow_install_python.png" width="500"/></p>
<p><img caption="false" height="308" src="/images/python-3.9.5-amd64_install1.png" width="500"/></p>
<p>直接在系統上安裝 Python 後, Python 3.9.5 位於 C:\Users\kmol2020\AppData\Local\Programs\Python\Python39\python.exe, 只不過並不在系統的環境變數 path 命令搜尋路徑中.</p>
<p>在系統中安裝 Python3.9.5 後, 利用 C:\Users\kmol2020\AppData\Local\Programs\Python\Python39\scripts\pip.exe list 查詢目前所安裝的模組之前, 必須先將操作系統的代理主機設定關閉後才可正確查詢, 結果為:</p>
<p>Package    Version<br/>---------- -------<br/>pip        21.1.1<br/>setuptools 56.0.0</p>
<p>接下來若要利用此一 Python 安裝 Leo Editor, 由於需要在系統目錄中寫入, 因此所啟動的 cmd 必須以管理者身分啟動, 指令為:</p>
<p>C:\Users\kmol2020\AppData\Local\Programs\Python\Python39\python.exe -m pip install leo</p>
<p>為了執行方便, 可以將 C:\Users\kmol2020\AppData\Local\Programs\Python\Python39\ 納入操作系統的命令搜尋路中中.</p>
<p>請注意: C:\Users\kmol2020\AppData\Local\Programs\Python\Python39\scripts\pip.exe install leo 命令遭到 Windows 10 版本 2004 拒絕執行, 必須採用 python.exe -m pip install leo 才行.</p>
<p>Leo Editor 安裝完成後, 利用 C:\Users\kmol2020\AppData\Local\Programs\Python\Python39\scripts\leo.exe 即可開啟. 但是針對啟動時採中文模式時, 將無法順利輸入英文 string 而無法開啟 Leo Editor. 這時就必須執行 leo.exe 之前, 先將中文模式轉為英文模式之後, 再執行 leo.exe, 否則無法建立起動 Leo Editor 必要的 .leoID.txt 檔案.</p>
<p>此一 .leoID.txt 位於 C:\Users\用戶名稱\.leo 目錄下. 且這時所安裝的 Leo Editor 版本為 6.3 版. 啟動時的畫面如下:</p>
<p><img alt="" height="387" src="/images/leo_editor_start_up.png" width="500"/></p>
<p>當上述以 python.exe -m pip install leo 之後, 除了 Leo Editor 之外, 其實也同時安裝了以下模組:</p>
<p>C:\WINDOWS\system32&gt;C:\Users\kmol2020\AppData\Local\Programs\Python\Python39\python.exe -m pip list<br/>Package                       Version<br/>----------------------------- ---------<br/>alabaster                     0.7.12<br/>appdirs                       1.4.4<br/>astroid                       2.5.6<br/>asttokens                     2.0.5<br/>attrs                         21.2.0<br/>Babel                         2.9.1<br/>black                         21.5b0<br/>certifi                       2020.12.5<br/>chardet                       4.0.0<br/>click                         7.1.2<br/>colorama                      0.4.4<br/>dialite                       0.5.3<br/>docutils                      0.17.1<br/>flexx                         0.8.1<br/>idna                          2.10<br/>imagesize                     1.2.0<br/>ipython-genutils              0.2.0<br/>isort                         5.8.0<br/>Jinja2                        2.11.3<br/>jsonschema                    3.2.0<br/>jupyter-core                  4.7.1<br/>lazy-object-proxy             1.6.0<br/>MarkupSafe                    1.1.1<br/>mccabe                        0.6.1<br/>meta                          1.0.2<br/>mypy-extensions               0.4.3<br/>nbformat                      5.1.3<br/>packaging                     20.9<br/>pathspec                      0.8.1<br/>pip                           21.1.1<br/>pscript                       0.7.5<br/>pyflakes                      2.3.1<br/>Pygments                      2.9.0<br/>pylint                        2.8.2<br/>pyparsing                     2.4.7<br/>PyQt5                         5.15.4<br/>PyQt5-Qt5                     5.15.2<br/>PyQt5-sip                     12.8.1<br/>PyQtWebEngine                 5.15.4<br/>PyQtWebEngine-Qt5             5.15.2<br/>pyrsistent                    0.17.3<br/>pyshortcuts                   1.8.0<br/>pytz                          2021.1<br/>pywin32                       300<br/>regex                         2021.4.4<br/>requests                      2.25.1<br/>setuptools                    56.0.0<br/>six                           1.16.0<br/>snowballstemmer               2.1.0<br/>Sphinx                        4.0.0<br/>sphinxcontrib-applehelp       1.0.2<br/>sphinxcontrib-devhelp         1.0.2<br/>sphinxcontrib-htmlhelp        1.0.3<br/>sphinxcontrib-jsmath          1.0.1<br/>sphinxcontrib-qthelp          1.0.3<br/>sphinxcontrib-serializinghtml 1.1.4<br/>toml                          0.10.2<br/>tornado                       6.1<br/>traitlets                     5.0.5<br/>urllib3                       1.26.4<br/>webruntime                    0.5.8<br/>windows-curses                2.2.0<br/>wrapt                         1.12.1</p>
<h4>建立可攜版本</h4>
<p>由於上述操作系統安裝 Python 3.9.5 的過程並不在 Windows 10 2004 版本 (2020.04 釋出的版本) 系統的規劃中, 因此採用可攜化安裝的方式, 其可控性較高, 且透過隨身碟方式執行, 可以在不同電腦中保有統一的個人設定, 因此比較建議採用可攜版本安裝 Python 3.9.5.</p>
<p>在 Windows 10 建立可攜 Python 3.9.5 執行環境的工具是 <a href="https://github.com/Bioruebe/UniExtract2">https://github.com/Bioruebe/UniExtract2</a>, 可以解開 python-3.9.5-amd64.exe, 第一階段將分別解開為: core.msi, dev.msi, doc.msi, exe.msi, lib.msi, tcltk.msi 與 tools.msi, 第二階段再將這些 .msi 解開到同一目錄, 即取得可攜系統 Python39 目錄的內容.</p>
<p>可攜系統的目錄中分別帶有 data 目錄與 start.bat 及 stop.bat 等啟動與關閉檔案.</p>
<p style="padding-left: 30px;">data</p>
<p style="padding-left: 30px;">start.bat</p>
<p style="padding-left: 30px;">stop.bat</p>
<p>而 data 目錄中則有以下目錄:</p>
<p style="padding-left: 30px;">python39</p>
<p style="padding-left: 30px;">portablegit</p>
<p style="padding-left: 30px;">PUTTY</p>
<p style="padding-left: 30px;">tcc</p>
<p style="padding-left: 30px;">wscite</p>
<p style="padding-left: 30px;">home</p>
<p style="padding-left: 30px;">tmp</p>
<h4>start.bat 檔案內容:</h4>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">@echo off
set Disk=y
subst %Disk%: "data"

%Disk%:

set HomePath=%Disk%:\home
set HomeDrive=%Disk%:\home
set Home=%Disk%:\home
set USERPROFILE=%Disk%:\home

REM 將系統 Python 程式的 io 設為 utf-8
set PYTHONIOENCODING="utf-8"

set PYTHONPATH=%Disk%:\Python39\DLLs;%Disk%:\Python39\Lib;%Disk%:\Python39\Lib\site-packages;
set PYTHONHOME=%Disk%:\Python39

REM for putty
set GIT_SSH=%Disk%:\putty\plink.exe

REM 設定跟 Python 有關的命令搜尋路徑
set path_python=%Disk%:\Python39;%Disk%:\Python39\Scripts;
REM 設定跟Git 有關的命令搜尋路徑
set path_git=%Disk%:\portablegit\bin;

set path_tcc=%Disk%:\tmp\tcc\win32;

path=%Disk%:;%path_python%;%path_git%;%path%;

start /MIN cmd.exe
start /MIN cmd.exe
start /MIN cmd.exe
start /MIN cmd.exe

start /MIN %Disk%:\wScite\SciTE.exe
start /MIN %Disk%:\wScite\SciTE.exe

Exit
</pre>
<h4>stop.bat 檔案內容:</h4>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">@echo off
set Disk=y
path=%PATH%;

taskkill /IM python.exe /F
taskkill /IM pythonw.exe /F
taskkill /IM scite.exe /F

REM 終止虛擬硬碟與目錄的對應
subst %Disk%: /D
REM 關閉 cmd 指令視窗
taskkill /IM cmd.exe /F

EXIT</pre>
<p>根據以上步驟所完成的可攜 Python 3.9.5 + Leo Editor 的系統: <a href="https://drive.google.com/file/d/1HXvoDhquboNbLhZ0b-dRTSVoRF-rrMk4/view?usp=sharing">portable_py395.7z</a> (under python At mde)</p>
<p></p><h1>Source codes</h1>
<p><a href="https://github.com/leo-editor/leo-editor">https://github.com/leo-editor/leo-editor</a></p>
<p>Leo Editor 6.4 development for Windows: <a href="/downloads/leo64.7z">leo64.7z</a> (下載 7.4MB 解開後約 36 MB)</p>
<p>Leo Editor 6.4 原始碼位於 <a href="https://github.com/mdecourse/leoeditor/tree/main/downloads/leo_sources">downloads/leo_sources</a>:</p>
<p style="padding-left: 30px;">總計有 607 個 Python 檔案, 解讀為 21672 節點.</p>
<p>當安裝 Leo Editor 後可以透過 import leo; leo.run(); 開啟 Leo Editor.</p>
<p>這裡可以透過 Leo Editor 的原始碼學習 Python Programming.</p>
<p>而 run() 的內容:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def run(*args,**keys):
    import pdb ; pdb = pdb.set_trace
    import leo.core.runLeo as runLeo
    runLeo.run(*args,**keys)</pre>
<p>因此透過以下程式碼, 也可以啟動 Leo Editor:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import pdb;pdb = pdb.set_trace
import leo.core.runLeo as runLeo
runLeo.run()</pre>
<p>其中的 pdb is for debug: <a href="https://leoeditor.com/debuggers.html">https://leoeditor.com/debuggers.html</a></p>
<p>Leo Editor 原始碼中的 sentinels 標註可以充作修改時間的註記, 讓 viewer 了解該程式修改的時間點.</p>
<p>由於 leo.core.runLeo 中 runLeo.py 將 from leo.core import leoGlobals as g, 因此後續 Leo Editor 開啟後, 所謂的 g 就是 leo.core.leoGlobals</p>
<hr/>
<p>從 <a href="https://github.com/mdecourse/leoeditor/blob/main/downloads/leo_sources/core/leoApp.py">https://github.com/mdecourse/leoeditor/blob/main/downloads/leo_sources/core/leoApp.py</a> 就不難看出 Leo Editor 的複雜度.</p>
<p>leoGui.py: <a href="https://github.com/mdecourse/leoeditor/blob/main/downloads/leo_sources/core/leoGui.py">https://github.com/mdecourse/leoeditor/blob/main/downloads/leo_sources/core/leoGui.py</a> 則定義基本的 Leo Editor 圖形界面.</p>
<p>Leo Editor 可同時支援 PyQt4 與 PyQt5 的設計: <a href="https://github.com/mdecourse/leoeditor/blob/main/downloads/leo_sources/core/leoQt.py">https://github.com/mdecourse/leoeditor/blob/main/downloads/leo_sources/core/leoQt.py</a></p><h2>es</h2>
<p>es 代表 echo string, 可以將執行結果顯示在 Log pane 中.</p>
<p>g.es() 函式定義位於 <a href="https://raw.githubusercontent.com/mdecourse/leoeditor/main/downloads/leo_sources/core/leoGlobals.py">https://raw.githubusercontent.com/mdecourse/leoeditor/main/downloads/leo_sources/core/leoGlobals.py</a> 中, 原始碼如下:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def es(*args, **keys):
    """Put all non-keyword args to the log pane.
    The first, third, fifth, etc. arg translated by g.translateString.
    Supports color, comma, newline, spaces and tabName keyword arguments.
    """
    if not app or app.killed:
        return
    if app.gui and app.gui.consoleOnly:
        return
    log = app.log
    # Compute the effective args.
    d = {
        'color': None,
        'commas': False,
        'newline': True,
        'spaces': True,
        'tabName': 'Log',
        'nodeLink': None,
    }
    d = g.doKeywordArgs(keys, d)
    color = d.get('color')
    if color == 'suppress':
        return  # New in 4.3.
    color = g.actualColor(color)
    tabName = d.get('tabName') or 'Log'
    newline = d.get('newline')
    s = g.translateArgs(args, d)
    # Do not call g.es, g.es_print, g.pr or g.trace here!
        # sys.__stdout__.write('\n===== g.es: %r\n' % s)
    if app.batchMode:
        if app.log:
            app.log.put(s)
    elif g.unitTesting:
        if log and not log.isNull:
            # This makes the output of unit tests match the output of scripts.
            g.pr(s, newline=newline)
    elif log and app.logInited:
        if newline:
            s += '\n'
        log.put(s, color=color, tabName=tabName, nodeLink=d['nodeLink'])
        # Count the number of *trailing* newlines.
        for ch in s:
            if ch == '\n': log.newlines += 1
            else: log.newlines = 0
    else:
        app.logWaiting.append((s, color, newline, d),)

log = es</pre>
<p></p><h1>Scripts</h1>
<p><a href="https://www.leoeditor.com/tutorial-scripting.html">https://www.leoeditor.com/tutorial-scripting.html</a> </p>
<p>Recursive Import:</p>
<p>c 為 Leo Editor 系統中的 <a href="https://leoeditor.com/cheatsheet.html#id18">command class</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">'''Recursively import all python files in a directory and clean the result.'''

c.recursiveImport(
    dir_ = r'./',
    kind = '@clean', # The new best practice.
    safe_at_file = False,
    theTypes = ['.py'] # Same as ['.py']
)</pre>
<hr/>
<p>g.es() 為 Leo Editor 系統中的 <a href="https://leoeditor.com/cheatsheet.html#id17">LeoApp class</a></p>
<hr/>
<p>啟動 Leo Editor:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">#!/usr/bin/env python

""" Leo launcher script
A minimal script to launch leo.
"""

import leo.core.runLeo
leo.core.runLeo.run()</pre><h2>At commands</h2>
<p>在 Leo Editor 這些以 @ 開頭的節點與內文指令稱為 directives (指令)</p>
<p><a href="https://www.leoeditor.com/directives.html">https://www.leoeditor.com/directives.html</a></p>
<pre>                         Sections &amp;   File data in
@&lt;file&gt; kind  Sentinels?  @others?    .leo file?    Notes
------------  ---------- -----------  ------------  -----
@asis            no         no           yes
@auto            no         yes          no         1, 2
@auto-xx         no         yes          no         1, 2
@clean           no         yes          yes
@edit            no         no           no
@file            yes        yes          no
@nosent          no         yes          yes</pre>
<p></p><h3>@file</h3>
<p><a href="https://www.leoeditor.com/directives.html#part-1-file-directives">https://www.leoeditor.com/directives.html#part-1-file-directives</a> </p>
<h3>@edit</h3>
<p>採用單階模式編輯檔案</p><h3>@clean</h3>
<p>採用樹狀架構編輯檔案, 必須配合 @others 使用, 將子節點的內容放入上層節點對應的位置.</p><h3>@auto</h3>
<p>在 @clean 之前所發展的多階節點編輯指令, 必須配合 @others 使用.</p><h3>@path</h3>
<p>宣告節點所在目錄, 通常配合 @edit, @auto, @clean 使用</p><h3>@data</h3>
<h2>Plugins</h2>
<p><a href="https://www.leoeditor.com/scripting-miscellany.html#id33">https://www.leoeditor.com/scripting-miscellany.html#id33</a></p>
<p><a href="https://www.leoeditor.com/writingPlugins.html">https://www.leoeditor.com/writingPlugins.html</a></p>
<h2>Qt Windows</h2>
<h4>直接在 Leo Editor 中編寫 PyQt 程式:</h4>
<p><a href="https://www.leoeditor.com/scripting-miscellany.html#id5">https://www.leoeditor.com/scripting-miscellany.html#id5</a></p>
<h2>Misc</h2>
<p>cut and paste on clipborad:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">g.app.gui.replaceClipboardWith('hi')
print(g.app.gui.getTextFromClipboard())</pre>
<p><a href="https://www.leoeditor.com/appendices.html#the-leonine-way-to-refactor-code">https://www.leoeditor.com/appendices.html#the-leonine-way-to-refactor-code</a> </p>
<p></p><h1>Notes</h1>
<p>是不是又該帶出 <a href="https://github.com/gitextensions/gitextensions">https://github.com/gitextensions/gitextensions</a></p>
<p>之前曾經使用過一陣子 gitextensions, 針對需要輸入中文 commit 的用戶應該是一項利多, 在目前 cmsimde 的 acp.bat 運用下, 還需要這項工具嗎?</p>