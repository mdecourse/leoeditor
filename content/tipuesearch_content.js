var tipuesearch = {"pages": [{'title': 'About', 'text': 'Leo Editor 導引網站的目的在試圖了解並運用其中獨特且實用的功能. \n 當然, 本網站的最大期望是能夠吸引更多年輕人進入 Leo Editor 的編程世界, 有機會參與協同程式開發, 進而改進現存的各種問題. \n Leo Editor 的挑戰: \n 開發時間已超過二十年, 許多新舊功能混雜在一起, 導致架構複雜, 新手難以入門. \n 由 少數 資深程式師負責開發, 不斷導入許多創新功能, 套件開發思考層面距離初學用戶太遠. \n 圖形界面設定極度不靈活, 導致初學用戶卻步. \n Leo Editor 簡介: \n https://www.leoeditor.com/preface.html \n 是一套全功能 IDE 與大綱管理套件 \n 使用 Python 編寫, 適合用來研究電腦程式碼 \n p.b 就是所選節點的 body text, Scripts have full access to all of Leo’s sources. \n Clones create multiple views of an outline. Leo’s underlying data is a  Directed Acyclic Graphs . @test and @suite scripts create unit tests automatically. \n https://www.leoeditor.com/appendices.html#the-leonine-way-to-refactor-code \n @button scripts apply scripts to outline data. \n The execute-script command pre-defines three names: c, g, and p. c is the commander of the outline in which the script executes. g is the leo.core.leoGlobals module, containing dozens of useful functions and classes. p is the position of the presently selected node. \n c - commander of the outline \n g - leo.core.leoGlobals \n p - position of the presently selected node \n https://www.leoeditor.com/scripting-miscellany.html#id30 \n https://www.leoeditor.com/scripting-miscellany.html#id33 \n 官方網站: \n https://www.leoeditor.com/ \n Google Group: \n https://groups.google.com/g/leo-editor?pli=1 \n 功能蒐羅: \n https://github.com/mdecourse/leoeditor/discussions/1', 'tags': '', 'url': 'About.html'}, {'title': 'Reference', 'text': 'https://mde.tw/lab/blog/how-to-use-leo-editor.html \n http://project.mde.tw/blog/tag/leo-editor.html \n Leo Editor 教學 (一)  - 在  Google 搜尋 "Leo Editor"  只傳回不到三萬筆的相關資料, 這對於已經開發超過 20 年的軟體套件來說, 可能是一項警訊, 因為沒有年輕人接手使用, 再好的數位工具, 最終仍難逃被時間淘汰的命運. \n https://news.ycombinator.com/item?id=17769892 \n https://www.zhihu.com/question/22323482 \n', 'tags': '', 'url': 'Reference.html'}, {'title': 'Application', 'text': '如何使用 Leo Editor \n 理論上透過 pip install leo 就可以安裝 Leo Editor, 但是在 Windows, Mac 與 Ubuntu 安裝後的版本經常不一致, 導致許多用法上莫衷一是, 這裡將要針對這三套操作系統的 Leo Editor 應用加以介紹. \n 首先是在 Windows 10 操作系統中安裝 Leo Editor: \n 系統安裝版 \n 當使用者從  https://www.python.org/downloads/windows/  下載安裝 Python 3.9.5 時, Windows 10 會出現下列畫面, 表示 Windows 10 其實是希望使用者透過操作系統的 APP 模式安裝 Python. 因此以下自行安裝的 Python 3.9.5 後, 操作系統並不會將必要的 Python 執行路徑納入環境變數, 使用者必須自行設定. \n \n \n 直接在系統上安裝 Python 後, Python 3.9.5 位於 C:\\Users\\kmol2020\\AppData\\Local\\Programs\\Python\\Python39\\python.exe, 只不過並不在系統的環境變數 path 命令搜尋路徑中. \n 在系統中安裝 Python3.9.5 後, 利用 C:\\Users\\kmol2020\\AppData\\Local\\Programs\\Python\\Python39\\scripts\\pip.exe list 查詢目前所安裝的模組之前, 必須先將操作系統的代理主機設定關閉後才可正確查詢, 結果為: \n Package\xa0\xa0\xa0 Version ---------- ------- pip\xa0\xa0\xa0\xa0\xa0\xa0\xa0 21.1.1 setuptools 56.0.0 \n 接下來若要利用此一 Python 安裝 Leo Editor, 由於需要在系統目錄中寫入, 因此所啟動的 cmd 必須以管理者身分啟動, 指令為: \n C:\\Users\\kmol2020\\AppData\\Local\\Programs\\Python\\Python39\\python.exe -m pip install leo \n 為了執行方便, 可以將 C:\\Users\\kmol2020\\AppData\\Local\\Programs\\Python\\Python39\\ 納入操作系統的命令搜尋路中中. \n 請注意: C:\\Users\\kmol2020\\AppData\\Local\\Programs\\Python\\Python39\\scripts\\pip.exe install leo 命令遭到 Windows 10 版本 2004 拒絕執行, 必須採用 python.exe -m pip install leo 才行. \n Leo Editor 安裝完成後, 利用 C:\\Users\\kmol2020\\AppData\\Local\\Programs\\Python\\Python39\\scripts\\leo.exe 即可開啟. 但是針對啟動時採中文模式時, 將無法順利輸入英文 string 而無法開啟 Leo Editor. 這時就必須執行 leo.exe 之前, 先將中文模式轉為英文模式之後, 再執行 leo.exe, 否則無法建立起動 Leo Editor 必要的 .leoID.txt 檔案. \n 此一 .leoID.txt 位於 C:\\Users\\用戶名稱\\.leo 目錄下. 且這時所安裝的 Leo Editor 版本為 6.3 版. 啟動時的畫面如下: \n \n 當上述以 python.exe -m pip install leo 之後, 除了 Leo Editor 之外, 其實也同時安裝了以下模組: \n C:\\WINDOWS\\system32>C:\\Users\\kmol2020\\AppData\\Local\\Programs\\Python\\Python39\\python.exe -m pip list Package\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Version ----------------------------- --------- alabaster\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 0.7.12 appdirs\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 1.4.4 astroid\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 2.5.6 asttokens\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 2.0.5 attrs\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 21.2.0 Babel\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 2.9.1 black\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 21.5b0 certifi\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 2020.12.5 chardet\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 4.0.0 click\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 7.1.2 colorama\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 0.4.4 dialite\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 0.5.3 docutils\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 0.17.1 flexx\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 0.8.1 idna\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 2.10 imagesize\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 1.2.0 ipython-genutils\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 0.2.0 isort\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 5.8.0 Jinja2\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 2.11.3 jsonschema\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 3.2.0 jupyter-core\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 4.7.1 lazy-object-proxy\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 1.6.0 MarkupSafe\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 1.1.1 mccabe\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 0.6.1 meta\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 1.0.2 mypy-extensions\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 0.4.3 nbformat\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 5.1.3 packaging\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 20.9 pathspec\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 0.8.1 pip\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 21.1.1 pscript\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 0.7.5 pyflakes\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 2.3.1 Pygments\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 2.9.0 pylint\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 2.8.2 pyparsing\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 2.4.7 PyQt5\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 5.15.4 PyQt5-Qt5\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 5.15.2 PyQt5-sip\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 12.8.1 PyQtWebEngine\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 5.15.4 PyQtWebEngine-Qt5\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 5.15.2 pyrsistent\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 0.17.3 pyshortcuts\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 1.8.0 pytz\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 2021.1 pywin32\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 300 regex\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 2021.4.4 requests\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 2.25.1 setuptools\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 56.0.0 six\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 1.16.0 snowballstemmer\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 2.1.0 Sphinx\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 4.0.0 sphinxcontrib-applehelp\xa0\xa0\xa0\xa0\xa0\xa0 1.0.2 sphinxcontrib-devhelp\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 1.0.2 sphinxcontrib-htmlhelp\xa0\xa0\xa0\xa0\xa0\xa0\xa0 1.0.3 sphinxcontrib-jsmath\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 1.0.1 sphinxcontrib-qthelp\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 1.0.3 sphinxcontrib-serializinghtml 1.1.4 toml\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 0.10.2 tornado\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 6.1 traitlets\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 5.0.5 urllib3\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 1.26.4 webruntime\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 0.5.8 windows-curses\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 2.2.0 wrapt\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 1.12.1 \n 建立可攜版本 \n 由於上述操作系統安裝 Python 3.9.5 的過程並不在 Windows 10 2004 版本 (2020.04 釋出的版本) 系統的規劃中, 因此採用可攜化安裝的方式, 其可控性較高, 且透過隨身碟方式執行, 可以在不同電腦中保有統一的個人設定, 因此比較建議採用可攜版本安裝 Python 3.9.5. \n 在 Windows 10 建立可攜 Python 3.9.5 執行環境的工具是  https://github.com/Bioruebe/UniExtract2 , 可以解開 python-3.9.5-amd64.exe, 第一階段將分別解開為: core.msi, dev.msi, doc.msi, exe.msi, lib.msi, tcltk.msi 與 tools.msi, 第二階段再將這些 .msi 解開到同一目錄, 即取得可攜系統 Python39 目錄的內容. \n 可攜系統的目錄中分別帶有 data 目錄與 start.bat 及 stop.bat 等啟動與關閉檔案. \n data \n start.bat \n stop.bat \n 而 data 目錄中則有以下目錄: \n python39 \n portablegit \n PUTTY \n tcc \n wscite \n home \n tmp \n start.bat 檔案內容: \n @echo off\nset Disk=y\nsubst %Disk%: "data"\n\n%Disk%:\n\nset HomePath=%Disk%:\\home\nset HomeDrive=%Disk%:\\home\nset Home=%Disk%:\\home\nset USERPROFILE=%Disk%:\\home\n\nREM 將系統 Python 程式的 io 設為 utf-8\nset PYTHONIOENCODING="utf-8"\n\nset PYTHONPATH=%Disk%:\\Python39\\DLLs;%Disk%:\\Python39\\Lib;%Disk%:\\Python39\\Lib\\site-packages;\nset PYTHONHOME=%Disk%:\\Python39\n\nREM for putty\nset GIT_SSH=%Disk%:\\putty\\plink.exe\n\nREM 設定跟 Python 有關的命令搜尋路徑\nset path_python=%Disk%:\\Python39;%Disk%:\\Python39\\Scripts;\nREM 設定跟Git 有關的命令搜尋路徑\nset path_git=%Disk%:\\portablegit\\bin;\n\nset path_tcc=%Disk%:\\tmp\\tcc\\win32;\n\npath=%Disk%:;%path_python%;%path_git%;%path_tcc%;%path%;\n\nstart /MIN cmd.exe\nstart /MIN cmd.exe\nstart /MIN cmd.exe\nstart /MIN cmd.exe\n\nstart /MIN %Disk%:\\wScite\\SciTE.exe\nstart /MIN %Disk%:\\wScite\\SciTE.exe\n\nExit\n \n stop.bat 檔案內容: \n @echo off\nset Disk=y\npath=%PATH%;\n\ntaskkill /IM python.exe /F\ntaskkill /IM pythonw.exe /F\ntaskkill /IM scite.exe /F\n\nREM 終止虛擬硬碟與目錄的對應\nsubst %Disk%: /D\nREM 關閉 cmd 指令視窗\ntaskkill /IM cmd.exe /F\n\nEXIT \n 根據以上步驟所完成的可攜 Python 3.9.5 + Leo Editor 的系統:  portable_py395.7z  (under python At mde) \n', 'tags': '', 'url': 'Application.html'}, {'title': 'Source codes', 'text': 'https://github.com/leo-editor/leo-editor \n Leo Editor 6.4 development for Windows:  leo64.7z  (下載 7.4MB 解開後約 36 MB) \n Leo Editor 6.4 原始碼位於  downloads/leo_sources : \n 總計有 607 個 Python 檔案, 解讀為 21672 節點. \n 當安裝 Leo Editor 後可以透過 import leo; leo.run(); 開啟 Leo Editor. \n 這裡可以透過 Leo Editor 的原始碼學習 Python Programming. \n 而 run() 的內容: \n def run(*args,**keys):\n    import pdb ; pdb = pdb.set_trace\n    import leo.core.runLeo as runLeo\n    runLeo.run(*args,**keys) \n 因此透過以下程式碼, 也可以啟動 Leo Editor: \n import pdb;pdb = pdb.set_trace\nimport leo.core.runLeo as runLeo\nrunLeo.run() \n 其中的 pdb is for debug:  https://leoeditor.com/debuggers.html \n Leo Editor 原始碼中的 sentinels 標註可以充作修改時間的註記, 讓 viewer 了解該程式修改的時間點. \n 由於 leo.core.runLeo 中 runLeo.py 將 from leo.core import leoGlobals as g, 因此後續 Leo Editor 開啟後, 所謂的 g 就是 leo.core.leoGlobals \n \n 從\xa0 https://github.com/mdecourse/leoeditor/blob/main/downloads/leo_sources/core/leoApp.py  就不難看出 Leo Editor 的複雜度. \n leoGui.py:  https://github.com/mdecourse/leoeditor/blob/main/downloads/leo_sources/core/leoGui.py  則定義基本的 Leo Editor 圖形界面. \n Leo Editor 可同時支援 PyQt4 與 PyQt5 的設計:  https://github.com/mdecourse/leoeditor/blob/main/downloads/leo_sources/core/leoQt.py', 'tags': '', 'url': 'Source codes.html'}, {'title': 'es', 'text': 'es 代表 echo string, 可以將執行結果顯示在 Log pane 中. \n g.es() 函式定義位於  https://raw.githubusercontent.com/mdecourse/leoeditor/main/downloads/leo_sources/core/leoGlobals.py  中, 原始碼如下: \n def es(*args, **keys):\n    """Put all non-keyword args to the log pane.\n    The first, third, fifth, etc. arg translated by g.translateString.\n    Supports color, comma, newline, spaces and tabName keyword arguments.\n    """\n    if not app or app.killed:\n        return\n    if app.gui and app.gui.consoleOnly:\n        return\n    log = app.log\n    # Compute the effective args.\n    d = {\n        \'color\': None,\n        \'commas\': False,\n        \'newline\': True,\n        \'spaces\': True,\n        \'tabName\': \'Log\',\n        \'nodeLink\': None,\n    }\n    d = g.doKeywordArgs(keys, d)\n    color = d.get(\'color\')\n    if color == \'suppress\':\n        return  # New in 4.3.\n    color = g.actualColor(color)\n    tabName = d.get(\'tabName\') or \'Log\'\n    newline = d.get(\'newline\')\n    s = g.translateArgs(args, d)\n    # Do not call g.es, g.es_print, g.pr or g.trace here!\n        # sys.__stdout__.write(\'\\n===== g.es: %r\\n\' % s)\n    if app.batchMode:\n        if app.log:\n            app.log.put(s)\n    elif g.unitTesting:\n        if log and not log.isNull:\n            # This makes the output of unit tests match the output of scripts.\n            g.pr(s, newline=newline)\n    elif log and app.logInited:\n        if newline:\n            s += \'\\n\'\n        log.put(s, color=color, tabName=tabName, nodeLink=d[\'nodeLink\'])\n        # Count the number of *trailing* newlines.\n        for ch in s:\n            if ch == \'\\n\': log.newlines += 1\n            else: log.newlines = 0\n    else:\n        app.logWaiting.append((s, color, newline, d),)\n\nlog = es \n', 'tags': '', 'url': 'es.html'}, {'title': 'Scripts', 'text': 'https://www.leoeditor.com/tutorial-scripting.html   \n Recursive Import: \n c 為 Leo Editor 系統中的  command class \n \'\'\'Recursively import all python files in a directory and clean the result.\'\'\'\n\nc.recursiveImport(\n    dir_ = r\'./\',\n    kind = \'@clean\', # The new best practice.\n    safe_at_file = False,\n    theTypes = [\'.py\'] # Same as [\'.py\']\n) \n \n g.es() 為 Leo Editor 系統中的  LeoApp class \n \n 啟動 Leo Editor: \n #!/usr/bin/env python\n\n""" Leo launcher script\nA minimal script to launch leo.\n"""\n\nimport leo.core.runLeo\nleo.core.runLeo.run()', 'tags': '', 'url': 'Scripts.html'}, {'title': 'At commands', 'text': '在 Leo Editor 這些以 @ 開頭的節點與內文指令稱為 directives (指令) \n https://www.leoeditor.com/directives.html \n                          Sections &   File data in\n@<file> kind  Sentinels?  @others?    .leo file?    Notes\n------------  ---------- -----------  ------------  -----\n@asis            no         no           yes\n@auto            no         yes          no         1, 2\n@auto-xx         no         yes          no         1, 2\n@clean           no         yes          yes\n@edit            no         no           no\n@file            yes        yes          no\n@nosent          no         yes          yes \n', 'tags': '', 'url': 'At commands.html'}, {'title': '@file', 'text': 'https://www.leoeditor.com/directives.html#part-1-file-directives   \n', 'tags': '', 'url': '@file.html'}, {'title': '@edit', 'text': '採用單階模式編輯檔案', 'tags': '', 'url': '@edit.html'}, {'title': '@clean', 'text': '採用樹狀架構編輯檔案, 必須配合 @others 使用, 將子節點的內容放入上層節點對應的位置.', 'tags': '', 'url': '@clean.html'}, {'title': '@auto', 'text': '在 @clean 之前所發展的多階節點編輯指令, 必須配合 @others 使用.', 'tags': '', 'url': '@auto.html'}, {'title': '@path', 'text': '宣告節點所在目錄, 通常配合 @edit, @auto, @clean 使用', 'tags': '', 'url': '@path.html'}, {'title': '@data', 'text': '', 'tags': '', 'url': '@data.html'}, {'title': 'Plugins', 'text': 'https://www.leoeditor.com/scripting-miscellany.html#id33 \n https://www.leoeditor.com/writingPlugins.html \n', 'tags': '', 'url': 'Plugins.html'}, {'title': 'Qt Windows', 'text': '直接在 Leo Editor 中編寫 PyQt 程式: \n https://www.leoeditor.com/scripting-miscellany.html#id5 \n', 'tags': '', 'url': 'Qt Windows.html'}, {'title': 'Misc', 'text': "cut and paste on clipborad: \n g.app.gui.replaceClipboardWith('hi')\nprint(g.app.gui.getTextFromClipboard()) \n https://www.leoeditor.com/appendices.html#the-leonine-way-to-refactor-code   \n", 'tags': '', 'url': 'Misc.html'}, {'title': 'Notes', 'text': '是不是又該帶出  https://github.com/gitextensions/gitextensions \n 之前曾經使用過一陣子 gitextensions, 針對需要輸入中文 commit 的用戶應該是一項利多, 在目前 cmsimde 的 acp.bat 運用下, 還需要這項工具嗎?', 'tags': '', 'url': 'Notes.html'}]};